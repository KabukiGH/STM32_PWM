
CONTROL_ADC_SERVO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000580  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000718  08000720  00010720  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  08000718  08000718  00010718  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800071c  0800071c  0001071c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000000  20000000  20000000  00010720  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000024  20000000  08000720  00020000  2**2
                  ALLOC
  7 ._user_heap_stack 00000400  20000024  08000720  00020024  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00010720  2**0
                  CONTENTS, READONLY
  9 .debug_info   00001246  00000000  00000000  00010750  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000003be  00000000  00000000  00011996  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000000f0  00000000  00000000  00011d58  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  00011e48  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000005a8  00000000  00000000  00011f10  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000097d  00000000  00000000  000124b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  00012e35  2**0
                  CONTENTS, READONLY
 16 .debug_frame  000002dc  00000000  00000000  00012eb4  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      0000003f  00000000  00000000  00013190  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000700 	.word	0x08000700

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	08000700 	.word	0x08000700

080001d8 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001d8:	b480      	push	{r7}
 80001da:	b083      	sub	sp, #12
 80001dc:	af00      	add	r7, sp, #0
 80001de:	4603      	mov	r3, r0
 80001e0:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80001e2:	4909      	ldr	r1, [pc, #36]	; (8000208 <NVIC_EnableIRQ+0x30>)
 80001e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001e8:	095b      	lsrs	r3, r3, #5
 80001ea:	79fa      	ldrb	r2, [r7, #7]
 80001ec:	f002 021f 	and.w	r2, r2, #31
 80001f0:	2001      	movs	r0, #1
 80001f2:	fa00 f202 	lsl.w	r2, r0, r2
 80001f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80001fa:	bf00      	nop
 80001fc:	370c      	adds	r7, #12
 80001fe:	46bd      	mov	sp, r7
 8000200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000204:	4770      	bx	lr
 8000206:	bf00      	nop
 8000208:	e000e100 	.word	0xe000e100

0800020c <LED_Init>:
uint16_t ADC_GetVal (void);
void Delay_ms(uint16_t time_ms);
void TIM2_Init(void);

void LED_Init(void)
{
 800020c:	b480      	push	{r7}
 800020e:	af00      	add	r7, sp, #0
	//1. Enable GPIO B clock
		RCC-> AHB1ENR |= (1<<1);  // enable GPIOB clock
 8000210:	4a12      	ldr	r2, [pc, #72]	; (800025c <LED_Init+0x50>)
 8000212:	4b12      	ldr	r3, [pc, #72]	; (800025c <LED_Init+0x50>)
 8000214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000216:	f043 0302 	orr.w	r3, r3, #2
 800021a:	6313      	str	r3, [r2, #48]	; 0x30
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800021c:	f3bf 8f4f 	dsb	sy
		__DSB();

	//2. Set PB13 as output
		GPIOB -> MODER |=  (1<<26); // 01: General purpose output mode
 8000220:	4a0f      	ldr	r2, [pc, #60]	; (8000260 <LED_Init+0x54>)
 8000222:	4b0f      	ldr	r3, [pc, #60]	; (8000260 <LED_Init+0x54>)
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800022a:	6013      	str	r3, [r2, #0]
		GPIOB -> OTYPER &= ~(1<<13);// 0: Output push-pull (reset state)
 800022c:	4a0c      	ldr	r2, [pc, #48]	; (8000260 <LED_Init+0x54>)
 800022e:	4b0c      	ldr	r3, [pc, #48]	; (8000260 <LED_Init+0x54>)
 8000230:	685b      	ldr	r3, [r3, #4]
 8000232:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000236:	6053      	str	r3, [r2, #4]
		GPIOB -> PUPDR &= ~(3<<26); // 00: No pull-up, pull-down
 8000238:	4a09      	ldr	r2, [pc, #36]	; (8000260 <LED_Init+0x54>)
 800023a:	4b09      	ldr	r3, [pc, #36]	; (8000260 <LED_Init+0x54>)
 800023c:	68db      	ldr	r3, [r3, #12]
 800023e:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8000242:	60d3      	str	r3, [r2, #12]
		GPIOB -> ODR ^= (1<<13); // turn off
 8000244:	4a06      	ldr	r2, [pc, #24]	; (8000260 <LED_Init+0x54>)
 8000246:	4b06      	ldr	r3, [pc, #24]	; (8000260 <LED_Init+0x54>)
 8000248:	695b      	ldr	r3, [r3, #20]
 800024a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800024e:	6153      	str	r3, [r2, #20]
}
 8000250:	bf00      	nop
 8000252:	46bd      	mov	sp, r7
 8000254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000258:	4770      	bx	lr
 800025a:	bf00      	nop
 800025c:	40023800 	.word	0x40023800
 8000260:	40020400 	.word	0x40020400

08000264 <main>:



int main(void)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	b084      	sub	sp, #16
 8000268:	af02      	add	r7, sp, #8

	ADC_Init ();
 800026a:	f000 f867 	bl	800033c <ADC_Init>
	ADC_Enable ();
 800026e:	f000 f8cf 	bl	8000410 <ADC_Enable>
	DMA_Init ();
 8000272:	f000 f915 	bl	80004a0 <DMA_Init>
	DMA_Config ();
 8000276:	f000 f8e5 	bl	8000444 <DMA_Config>
	TIM2_Init();
 800027a:	f000 f95f 	bl	800053c <TIM2_Init>
	LED_Init();
 800027e:	f7ff ffc5 	bl	800020c <LED_Init>

	ADC_Start ();
 8000282:	f000 f8fb 	bl	800047c <ADC_Start>

	NVIC_EnableIRQ(ADC_IRQn);
 8000286:	2012      	movs	r0, #18
 8000288:	f7ff ffa6 	bl	80001d8 <NVIC_EnableIRQ>

	//ADC_WaitForConv();
	//ADC_VAL = ADC_GetVal();

	// Map The ADC Result To Servo Pulse Width
	angle = mapping(ADC_VAL, 0, 4096, 25, 125);
 800028c:	4b0c      	ldr	r3, [pc, #48]	; (80002c0 <main+0x5c>)
 800028e:	881b      	ldrh	r3, [r3, #0]
 8000290:	b29b      	uxth	r3, r3
 8000292:	4618      	mov	r0, r3
 8000294:	237d      	movs	r3, #125	; 0x7d
 8000296:	9300      	str	r3, [sp, #0]
 8000298:	2319      	movs	r3, #25
 800029a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800029e:	2100      	movs	r1, #0
 80002a0:	f000 f930 	bl	8000504 <mapping>
 80002a4:	4603      	mov	r3, r0
 80002a6:	b29a      	uxth	r2, r3
 80002a8:	4b06      	ldr	r3, [pc, #24]	; (80002c4 <main+0x60>)
 80002aa:	801a      	strh	r2, [r3, #0]
	// Set PWM duty cycle
	TIM2 -> CCR1 = angle;
 80002ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002b0:	4a04      	ldr	r2, [pc, #16]	; (80002c4 <main+0x60>)
 80002b2:	8812      	ldrh	r2, [r2, #0]
 80002b4:	b292      	uxth	r2, r2
 80002b6:	635a      	str	r2, [r3, #52]	; 0x34
	//TIM2 -> CCR1 = 100; //  duty cycle is 2 ms  according to Real servo position +45 Deg
	TIM2 -> CCR1 = 125; // duty cycle is 2.5 ms, according to Real servo position +90 Deg
	Delay_ms (2000);
	*/

	int breakPtr = 0;
 80002b8:	2300      	movs	r3, #0
 80002ba:	607b      	str	r3, [r7, #4]
	{
 80002bc:	e7e6      	b.n	800028c <main+0x28>
 80002be:	bf00      	nop
 80002c0:	2000001c 	.word	0x2000001c
 80002c4:	2000001e 	.word	0x2000001e

080002c8 <SysTick_Handler>:



/* Interrupts */
void SysTick_Handler(void)
{
 80002c8:	b480      	push	{r7}
 80002ca:	af00      	add	r7, sp, #0
msTicks++;
 80002cc:	4b05      	ldr	r3, [pc, #20]	; (80002e4 <SysTick_Handler+0x1c>)
 80002ce:	881b      	ldrh	r3, [r3, #0]
 80002d0:	3301      	adds	r3, #1
 80002d2:	b29a      	uxth	r2, r3
 80002d4:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <SysTick_Handler+0x1c>)
 80002d6:	801a      	strh	r2, [r3, #0]
}
 80002d8:	bf00      	nop
 80002da:	46bd      	mov	sp, r7
 80002dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e0:	4770      	bx	lr
 80002e2:	bf00      	nop
 80002e4:	20000020 	.word	0x20000020

080002e8 <ADC_IRQHandler>:


void ADC_IRQHandler(void)
{
 80002e8:	b480      	push	{r7}
 80002ea:	af00      	add	r7, sp, #0
	if ( ADC1->SR & ADC_SR_AWD )
 80002ec:	4b11      	ldr	r3, [pc, #68]	; (8000334 <ADC_IRQHandler+0x4c>)
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	f003 0301 	and.w	r3, r3, #1
 80002f4:	2b00      	cmp	r3, #0
 80002f6:	d018      	beq.n	800032a <ADC_IRQHandler+0x42>
	{

		ADC1->SR &= ~(1<<0); // clear flag
 80002f8:	4a0e      	ldr	r2, [pc, #56]	; (8000334 <ADC_IRQHandler+0x4c>)
 80002fa:	4b0e      	ldr	r3, [pc, #56]	; (8000334 <ADC_IRQHandler+0x4c>)
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	f023 0301 	bic.w	r3, r3, #1
 8000302:	6013      	str	r3, [r2, #0]
		if(( ADC1 ->DR) >= (ADC1 -> HTR))
 8000304:	4b0b      	ldr	r3, [pc, #44]	; (8000334 <ADC_IRQHandler+0x4c>)
 8000306:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000308:	4b0a      	ldr	r3, [pc, #40]	; (8000334 <ADC_IRQHandler+0x4c>)
 800030a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800030c:	429a      	cmp	r2, r3
 800030e:	d306      	bcc.n	800031e <ADC_IRQHandler+0x36>
		{
			GPIOB -> ODR |=  GPIO_ODR_ODR_13;//(1<<13); //
 8000310:	4a09      	ldr	r2, [pc, #36]	; (8000338 <ADC_IRQHandler+0x50>)
 8000312:	4b09      	ldr	r3, [pc, #36]	; (8000338 <ADC_IRQHandler+0x50>)
 8000314:	695b      	ldr	r3, [r3, #20]
 8000316:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800031a:	6153      	str	r3, [r2, #20]
		else
		{
			GPIOB -> ODR &=  ~GPIO_ODR_ODR_13; //~(1<<13); //
		}
	}
}
 800031c:	e005      	b.n	800032a <ADC_IRQHandler+0x42>
			GPIOB -> ODR &=  ~GPIO_ODR_ODR_13; //~(1<<13); //
 800031e:	4a06      	ldr	r2, [pc, #24]	; (8000338 <ADC_IRQHandler+0x50>)
 8000320:	4b05      	ldr	r3, [pc, #20]	; (8000338 <ADC_IRQHandler+0x50>)
 8000322:	695b      	ldr	r3, [r3, #20]
 8000324:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000328:	6153      	str	r3, [r2, #20]
}
 800032a:	bf00      	nop
 800032c:	46bd      	mov	sp, r7
 800032e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000332:	4770      	bx	lr
 8000334:	40012000 	.word	0x40012000
 8000338:	40020400 	.word	0x40020400

0800033c <ADC_Init>:
/* Private functions */

void ADC_Init (void)
{
 800033c:	b480      	push	{r7}
 800033e:	af00      	add	r7, sp, #0
	5. Set the Regular channel sequence length in ADC_SQR1 and set Channel 1 in ADC_SQR3
	7. Set the Respective GPIO PINs in the Analog Mode
	************************************************/

//1. Enable ADC and GPIO clock
	RCC->APB2ENR |= (1<<8);  // enable ADC1 clock
 8000340:	4a30      	ldr	r2, [pc, #192]	; (8000404 <ADC_Init+0xc8>)
 8000342:	4b30      	ldr	r3, [pc, #192]	; (8000404 <ADC_Init+0xc8>)
 8000344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000346:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800034a:	6453      	str	r3, [r2, #68]	; 0x44
	RCC->AHB1ENR |= (1<<0);  // enable GPIOA clock
 800034c:	4a2d      	ldr	r2, [pc, #180]	; (8000404 <ADC_Init+0xc8>)
 800034e:	4b2d      	ldr	r3, [pc, #180]	; (8000404 <ADC_Init+0xc8>)
 8000350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000352:	f043 0301 	orr.w	r3, r3, #1
 8000356:	6313      	str	r3, [r2, #48]	; 0x30
 8000358:	f3bf 8f4f 	dsb	sy
	__DSB();

//2. Set Resolution in the Control Register 1 (CR1)
	ADC1->CR1 &= ~(1<<24);   // 12 bit RES
 800035c:	4a2a      	ldr	r2, [pc, #168]	; (8000408 <ADC_Init+0xcc>)
 800035e:	4b2a      	ldr	r3, [pc, #168]	; (8000408 <ADC_Init+0xcc>)
 8000360:	685b      	ldr	r3, [r3, #4]
 8000362:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000366:	6053      	str	r3, [r2, #4]

//3. Set the Continuous Conversion, enable DMA and Data Alignment in Control Reg 2 (CR2)
    ADC1->CR2 |= (1<<1);     // enable continuous conversion mode
 8000368:	4a27      	ldr	r2, [pc, #156]	; (8000408 <ADC_Init+0xcc>)
 800036a:	4b27      	ldr	r3, [pc, #156]	; (8000408 <ADC_Init+0xcc>)
 800036c:	689b      	ldr	r3, [r3, #8]
 800036e:	f043 0302 	orr.w	r3, r3, #2
 8000372:	6093      	str	r3, [r2, #8]
   // ADC1->CR2 |= (1<<10);    // EOC after each conversion
	ADC1->CR2 &= ~(1<<11);   // Data Alignment RIGHT
 8000374:	4a24      	ldr	r2, [pc, #144]	; (8000408 <ADC_Init+0xcc>)
 8000376:	4b24      	ldr	r3, [pc, #144]	; (8000408 <ADC_Init+0xcc>)
 8000378:	689b      	ldr	r3, [r3, #8]
 800037a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800037e:	6093      	str	r3, [r2, #8]
	ADC1->CR2 |= (1<<8);  //DMA mode enabled
 8000380:	4a21      	ldr	r2, [pc, #132]	; (8000408 <ADC_Init+0xcc>)
 8000382:	4b21      	ldr	r3, [pc, #132]	; (8000408 <ADC_Init+0xcc>)
 8000384:	689b      	ldr	r3, [r3, #8]
 8000386:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800038a:	6093      	str	r3, [r2, #8]
	ADC1->CR2 |= (1<<9);  // DMA enable continuous request
 800038c:	4a1e      	ldr	r2, [pc, #120]	; (8000408 <ADC_Init+0xcc>)
 800038e:	4b1e      	ldr	r3, [pc, #120]	; (8000408 <ADC_Init+0xcc>)
 8000390:	689b      	ldr	r3, [r3, #8]
 8000392:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000396:	6093      	str	r3, [r2, #8]

//4. Set the Sampling Time for the channels
	//ADC1->SMPR2 &= ~(1<<3);  // Sampling time of 3 cycles for channel 1

//5. Set the Regular channel sequence length in ADC_SQR1
	ADC1->SQR1 &= ~(15<<20);   // SQR1_L =0 for 1 conversions
 8000398:	4a1b      	ldr	r2, [pc, #108]	; (8000408 <ADC_Init+0xcc>)
 800039a:	4b1b      	ldr	r3, [pc, #108]	; (8000408 <ADC_Init+0xcc>)
 800039c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800039e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80003a2:	62d3      	str	r3, [r2, #44]	; 0x2c

	// Set Channel Sequence
	ADC1->SQR3 |= (1<<0);  // SEQ1 for Channel 1
 80003a4:	4a18      	ldr	r2, [pc, #96]	; (8000408 <ADC_Init+0xcc>)
 80003a6:	4b18      	ldr	r3, [pc, #96]	; (8000408 <ADC_Init+0xcc>)
 80003a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80003aa:	f043 0301 	orr.w	r3, r3, #1
 80003ae:	6353      	str	r3, [r2, #52]	; 0x34

//7. Set the Respective GPIO PINs in the Analog Mode
	GPIOA->MODER |= (3<<2);  // analog mode for PA 1 (channel 1)
 80003b0:	4a16      	ldr	r2, [pc, #88]	; (800040c <ADC_Init+0xd0>)
 80003b2:	4b16      	ldr	r3, [pc, #88]	; (800040c <ADC_Init+0xd0>)
 80003b4:	681b      	ldr	r3, [r3, #0]
 80003b6:	f043 030c 	orr.w	r3, r3, #12
 80003ba:	6013      	str	r3, [r2, #0]


	//*******************************
	// Add Watchdog
	ADC1 -> CR1 |= (1<<23);	// Bit 23 AWDEN: Analog watchdog enable on regular channels
 80003bc:	4a12      	ldr	r2, [pc, #72]	; (8000408 <ADC_Init+0xcc>)
 80003be:	4b12      	ldr	r3, [pc, #72]	; (8000408 <ADC_Init+0xcc>)
 80003c0:	685b      	ldr	r3, [r3, #4]
 80003c2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80003c6:	6053      	str	r3, [r2, #4]
	ADC1 -> CR1 |= (1<<9); // 1: Analog watchdog enabled on a single channel
 80003c8:	4a0f      	ldr	r2, [pc, #60]	; (8000408 <ADC_Init+0xcc>)
 80003ca:	4b0f      	ldr	r3, [pc, #60]	; (8000408 <ADC_Init+0xcc>)
 80003cc:	685b      	ldr	r3, [r3, #4]
 80003ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80003d2:	6053      	str	r3, [r2, #4]
	ADC1 ->CR1 |= (1<<0);// select channel: 00001: ADC analog input Channel 1
 80003d4:	4a0c      	ldr	r2, [pc, #48]	; (8000408 <ADC_Init+0xcc>)
 80003d6:	4b0c      	ldr	r3, [pc, #48]	; (8000408 <ADC_Init+0xcc>)
 80003d8:	685b      	ldr	r3, [r3, #4]
 80003da:	f043 0301 	orr.w	r3, r3, #1
 80003de:	6053      	str	r3, [r2, #4]
	ADC1 -> CR1 |= (1<<6); // Bit 6 AWDIE: Analog watchdog interrupt enable
 80003e0:	4a09      	ldr	r2, [pc, #36]	; (8000408 <ADC_Init+0xcc>)
 80003e2:	4b09      	ldr	r3, [pc, #36]	; (8000408 <ADC_Init+0xcc>)
 80003e4:	685b      	ldr	r3, [r3, #4]
 80003e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80003ea:	6053      	str	r3, [r2, #4]

	ADC1 -> LTR = 0;// Set ADC watchdog lower threshold register (ADC_LTR)
 80003ec:	4b06      	ldr	r3, [pc, #24]	; (8000408 <ADC_Init+0xcc>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	629a      	str	r2, [r3, #40]	; 0x28
	ADC1 -> HTR = 2048; // ADC watchdog higher threshold register (ADC_HTR)
 80003f2:	4b05      	ldr	r3, [pc, #20]	; (8000408 <ADC_Init+0xcc>)
 80003f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80003f8:	625a      	str	r2, [r3, #36]	; 0x24


	//*******************************


}
 80003fa:	bf00      	nop
 80003fc:	46bd      	mov	sp, r7
 80003fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000402:	4770      	bx	lr
 8000404:	40023800 	.word	0x40023800
 8000408:	40012000 	.word	0x40012000
 800040c:	40020000 	.word	0x40020000

08000410 <ADC_Enable>:


void ADC_Enable (void)
{
 8000410:	b480      	push	{r7}
 8000412:	b083      	sub	sp, #12
 8000414:	af00      	add	r7, sp, #0
	/************** STEPS TO FOLLOW *****************
	1. Enable the ADC by setting ADON bit in CR2
	2. Wait for ADC to stabilize (approx 10us)
	************************************************/
	ADC1->CR2 |= 1<<0;   // ADON =1 enable ADC1
 8000416:	4a0a      	ldr	r2, [pc, #40]	; (8000440 <ADC_Enable+0x30>)
 8000418:	4b09      	ldr	r3, [pc, #36]	; (8000440 <ADC_Enable+0x30>)
 800041a:	689b      	ldr	r3, [r3, #8]
 800041c:	f043 0301 	orr.w	r3, r3, #1
 8000420:	6093      	str	r3, [r2, #8]
	uint32_t delay = 10000;
 8000422:	f242 7310 	movw	r3, #10000	; 0x2710
 8000426:	607b      	str	r3, [r7, #4]
	while (delay--);
 8000428:	bf00      	nop
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	1e5a      	subs	r2, r3, #1
 800042e:	607a      	str	r2, [r7, #4]
 8000430:	2b00      	cmp	r3, #0
 8000432:	d1fa      	bne.n	800042a <ADC_Enable+0x1a>
}
 8000434:	bf00      	nop
 8000436:	370c      	adds	r7, #12
 8000438:	46bd      	mov	sp, r7
 800043a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043e:	4770      	bx	lr
 8000440:	40012000 	.word	0x40012000

08000444 <DMA_Config>:

void DMA_Config (void)
{
 8000444:	b480      	push	{r7}
 8000446:	af00      	add	r7, sp, #0
	3. Enable the DMA Stream

	Some peripherals don't need a start condition, like UART, So as soon as you enable the DMA, the transfer will begin
	While Peripherals like ADC needs the Start condition, so Start the ADC later in the program, to enable the transfer
	************************************************/
	DMA2_Stream0->PAR = (uint32_t)&ADC1->DR; // source
 8000448:	4b09      	ldr	r3, [pc, #36]	; (8000470 <DMA_Config+0x2c>)
 800044a:	4a0a      	ldr	r2, [pc, #40]	; (8000474 <DMA_Config+0x30>)
 800044c:	609a      	str	r2, [r3, #8]
	// Destination Address is memory address
	DMA2_Stream0->M0AR = (uint32_t)&ADC_VAL; // target
 800044e:	4b08      	ldr	r3, [pc, #32]	; (8000470 <DMA_Config+0x2c>)
 8000450:	4a09      	ldr	r2, [pc, #36]	; (8000478 <DMA_Config+0x34>)
 8000452:	60da      	str	r2, [r3, #12]
	// Set the size of the transfer
	DMA2_Stream0->NDTR = 1; // size 1 == 8bit
 8000454:	4b06      	ldr	r3, [pc, #24]	; (8000470 <DMA_Config+0x2c>)
 8000456:	2201      	movs	r2, #1
 8000458:	605a      	str	r2, [r3, #4]
	// Enable the DMA Stream
	DMA2_Stream0->CR |= (1<<0);  // EN =1
 800045a:	4a05      	ldr	r2, [pc, #20]	; (8000470 <DMA_Config+0x2c>)
 800045c:	4b04      	ldr	r3, [pc, #16]	; (8000470 <DMA_Config+0x2c>)
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	f043 0301 	orr.w	r3, r3, #1
 8000464:	6013      	str	r3, [r2, #0]
}
 8000466:	bf00      	nop
 8000468:	46bd      	mov	sp, r7
 800046a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800046e:	4770      	bx	lr
 8000470:	40026410 	.word	0x40026410
 8000474:	4001204c 	.word	0x4001204c
 8000478:	2000001c 	.word	0x2000001c

0800047c <ADC_Start>:


void ADC_Start(void)
{
 800047c:	b480      	push	{r7}
 800047e:	af00      	add	r7, sp, #0
	/************** STEPS TO FOLLOW *****************
	1. Clear the Status register
	2. Start the Conversion by Setting the SWSTART bit in CR2
	*************************************************/
	ADC1->SR = 0;                      // Clear Status register
 8000480:	4b06      	ldr	r3, [pc, #24]	; (800049c <ADC_Start+0x20>)
 8000482:	2200      	movs	r2, #0
 8000484:	601a      	str	r2, [r3, #0]
	ADC1->CR2 |= (1<<30);                // Start conversion for regular channel
 8000486:	4a05      	ldr	r2, [pc, #20]	; (800049c <ADC_Start+0x20>)
 8000488:	4b04      	ldr	r3, [pc, #16]	; (800049c <ADC_Start+0x20>)
 800048a:	689b      	ldr	r3, [r3, #8]
 800048c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000490:	6093      	str	r3, [r2, #8]
}
 8000492:	bf00      	nop
 8000494:	46bd      	mov	sp, r7
 8000496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800049a:	4770      	bx	lr
 800049c:	40012000 	.word	0x40012000

080004a0 <DMA_Init>:

void DMA_Init (void)
{
 80004a0:	b480      	push	{r7}
 80004a2:	af00      	add	r7, sp, #0
	5. Set the Data Size
	6. Select the channel for the Stream
	************************************************/

	// 1. DMA2 clock enable
	RCC -> AHB1ENR |= (1<<22);
 80004a4:	4a15      	ldr	r2, [pc, #84]	; (80004fc <DMA_Init+0x5c>)
 80004a6:	4b15      	ldr	r3, [pc, #84]	; (80004fc <DMA_Init+0x5c>)
 80004a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004aa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80004ae:	6313      	str	r3, [r2, #48]	; 0x30
 80004b0:	f3bf 8f4f 	dsb	sy
	__DSB();

	// 2. Set the Data Direction
	DMA2_Stream0 -> CR &= ~(3<<10); // 00: Peripheral-to-memory
 80004b4:	4a12      	ldr	r2, [pc, #72]	; (8000500 <DMA_Init+0x60>)
 80004b6:	4b12      	ldr	r3, [pc, #72]	; (8000500 <DMA_Init+0x60>)
 80004b8:	681b      	ldr	r3, [r3, #0]
 80004ba:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80004be:	6013      	str	r3, [r2, #0]

	// 2. Enable the circular mode (CIRC)
	DMA2_Stream0 -> CR |= (1<<8);
 80004c0:	4a0f      	ldr	r2, [pc, #60]	; (8000500 <DMA_Init+0x60>)
 80004c2:	4b0f      	ldr	r3, [pc, #60]	; (8000500 <DMA_Init+0x60>)
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004ca:	6013      	str	r3, [r2, #0]

	// 3. Enable the Memory Increment (MINC)
	//DMA2_Stream0 -> CR |= (1<<10); //MINC:1

	// 4. Set the Peripheral data size (PSIZE)
	DMA2_Stream0 -> CR |= (1<<11); // PSIZE = 01,
 80004cc:	4a0c      	ldr	r2, [pc, #48]	; (8000500 <DMA_Init+0x60>)
 80004ce:	4b0c      	ldr	r3, [pc, #48]	; (8000500 <DMA_Init+0x60>)
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80004d6:	6013      	str	r3, [r2, #0]

	// 5. Set the Memory data size (MSIZE)
	DMA2_Stream0 -> CR |= (1<<13); // MSIZE = 01, 16 bit data
 80004d8:	4a09      	ldr	r2, [pc, #36]	; (8000500 <DMA_Init+0x60>)
 80004da:	4b09      	ldr	r3, [pc, #36]	; (8000500 <DMA_Init+0x60>)
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80004e2:	6013      	str	r3, [r2, #0]

	// 6. Select channel for the stream
	DMA2_Stream0->CR &= ~(7<<25);  // Channel 0 selected
 80004e4:	4a06      	ldr	r2, [pc, #24]	; (8000500 <DMA_Init+0x60>)
 80004e6:	4b06      	ldr	r3, [pc, #24]	; (8000500 <DMA_Init+0x60>)
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 80004ee:	6013      	str	r3, [r2, #0]

}
 80004f0:	bf00      	nop
 80004f2:	46bd      	mov	sp, r7
 80004f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop
 80004fc:	40023800 	.word	0x40023800
 8000500:	40026410 	.word	0x40026410

08000504 <mapping>:


uint32_t mapping(uint32_t au32_IN, uint32_t au32_INmin, uint32_t au32_INmax, uint32_t au32_OUTmin, uint32_t au32_OUTmax)
{
 8000504:	b480      	push	{r7}
 8000506:	b085      	sub	sp, #20
 8000508:	af00      	add	r7, sp, #0
 800050a:	60f8      	str	r0, [r7, #12]
 800050c:	60b9      	str	r1, [r7, #8]
 800050e:	607a      	str	r2, [r7, #4]
 8000510:	603b      	str	r3, [r7, #0]
    return ((((au32_IN - au32_INmin)*(au32_OUTmax - au32_OUTmin))/(au32_INmax - au32_INmin)) + au32_OUTmin);
 8000512:	68fa      	ldr	r2, [r7, #12]
 8000514:	68bb      	ldr	r3, [r7, #8]
 8000516:	1ad3      	subs	r3, r2, r3
 8000518:	69b9      	ldr	r1, [r7, #24]
 800051a:	683a      	ldr	r2, [r7, #0]
 800051c:	1a8a      	subs	r2, r1, r2
 800051e:	fb02 f203 	mul.w	r2, r2, r3
 8000522:	6879      	ldr	r1, [r7, #4]
 8000524:	68bb      	ldr	r3, [r7, #8]
 8000526:	1acb      	subs	r3, r1, r3
 8000528:	fbb2 f2f3 	udiv	r2, r2, r3
 800052c:	683b      	ldr	r3, [r7, #0]
 800052e:	4413      	add	r3, r2
}
 8000530:	4618      	mov	r0, r3
 8000532:	3714      	adds	r7, #20
 8000534:	46bd      	mov	sp, r7
 8000536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053a:	4770      	bx	lr

0800053c <TIM2_Init>:

}


void TIM2_Init(void)
{
 800053c:	b480      	push	{r7}
 800053e:	af00      	add	r7, sp, #0
	// 1. Set clock
	RCC -> APB1ENR |= (1<<0); // enable tim2 clock (1<<0); macro RCC_APB1ENR_TIM2EN
 8000540:	4a2b      	ldr	r2, [pc, #172]	; (80005f0 <TIM2_Init+0xb4>)
 8000542:	4b2b      	ldr	r3, [pc, #172]	; (80005f0 <TIM2_Init+0xb4>)
 8000544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000546:	f043 0301 	orr.w	r3, r3, #1
 800054a:	6413      	str	r3, [r2, #64]	; 0x40

	// 2. Configure the output pin:

    /* a) Select the output mode by writing CCS bits in CCMRx register */
	TIM2 ->CCMR1 |= (1<<3); // OC1PE
 800054c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000550:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000554:	699b      	ldr	r3, [r3, #24]
 8000556:	f043 0308 	orr.w	r3, r3, #8
 800055a:	6193      	str	r3, [r2, #24]

	// 3. Select the PWM mode PWM1 o by writing OCxM bits in CCMRx register
	TIM2 -> CCMR1 |= (6<<4);//  Set OC1M: Output PWM mode 1 Analog Pin A0
 800055c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000560:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000564:	699b      	ldr	r3, [r3, #24]
 8000566:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800056a:	6193      	str	r3, [r2, #24]

    /*For example, If I want to give a pulse width of 1 ms i.e. (1*1000/20) = 50%,
    I will write 50 instead of X in CCR1 register.
    For 2 ms, It will be 100%, and for 1.5 ms, It will be 75% and so on */

	TIM2->PSC = 319;
 800056c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000570:	f240 123f 	movw	r2, #319	; 0x13f
 8000574:	629a      	str	r2, [r3, #40]	; 0x28
	TIM2->ARR = 999;
 8000576:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800057a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800057e:	62da      	str	r2, [r3, #44]	; 0x2c

	//5. Set the preload bit in CCMRx register and the ARPE bit in the CR1 register

	//ARPE: Auto-reload preload enable
	TIM2 -> CR1 |= (1<<7);
 8000580:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000584:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800058e:	6013      	str	r3, [r2, #0]
	// Center-aligned mode 1 off
	//TIM2 -> CR1 |= (1<<5);

	//6. Enable the capture compare

	TIM2 -> CCER |= (1<<0); // 1: On - OC1 signal is output on the corresponding output pin
 8000590:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000594:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000598:	6a1b      	ldr	r3, [r3, #32]
 800059a:	f043 0301 	orr.w	r3, r3, #1
 800059e:	6213      	str	r3, [r2, #32]
	TIM2 -> EGR |= (1<<0); //Re-initialize the counter and generates an update of the registers
 80005a0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80005a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80005a8:	695b      	ldr	r3, [r3, #20]
 80005aa:	f043 0301 	orr.w	r3, r3, #1
 80005ae:	6153      	str	r3, [r2, #20]

	//7. Enable the counter.

	TIM2->CR1 |= TIM_CR1_CEN;
 80005b0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80005b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	f043 0301 	orr.w	r3, r3, #1
 80005be:	6013      	str	r3, [r2, #0]

	// Config Pin
	GPIOA -> MODER |= (2<<0); // PA0 10: Alternate function mode PIN A1
 80005c0:	4a0c      	ldr	r2, [pc, #48]	; (80005f4 <TIM2_Init+0xb8>)
 80005c2:	4b0c      	ldr	r3, [pc, #48]	; (80005f4 <TIM2_Init+0xb8>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	f043 0302 	orr.w	r3, r3, #2
 80005ca:	6013      	str	r3, [r2, #0]
	GPIOA -> OTYPER &=~(1<<0);// 0: Output push-pull (reset state)
 80005cc:	4a09      	ldr	r2, [pc, #36]	; (80005f4 <TIM2_Init+0xb8>)
 80005ce:	4b09      	ldr	r3, [pc, #36]	; (80005f4 <TIM2_Init+0xb8>)
 80005d0:	685b      	ldr	r3, [r3, #4]
 80005d2:	f023 0301 	bic.w	r3, r3, #1
 80005d6:	6053      	str	r3, [r2, #4]

	//!!!!!!!!!!!!
	// GPIO alternate function: GPIOA ->  AFR[1] Px8 - Px15, AFR[0] Px0 - Px7

	GPIOA ->AFR[0] |= (1<<0); // Set AF1, TIM2
 80005d8:	4a06      	ldr	r2, [pc, #24]	; (80005f4 <TIM2_Init+0xb8>)
 80005da:	4b06      	ldr	r3, [pc, #24]	; (80005f4 <TIM2_Init+0xb8>)
 80005dc:	6a1b      	ldr	r3, [r3, #32]
 80005de:	f043 0301 	orr.w	r3, r3, #1
 80005e2:	6213      	str	r3, [r2, #32]


}
 80005e4:	bf00      	nop
 80005e6:	46bd      	mov	sp, r7
 80005e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop
 80005f0:	40023800 	.word	0x40023800
 80005f4:	40020000 	.word	0x40020000

080005f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80005f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000630 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80005fc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80005fe:	e003      	b.n	8000608 <LoopCopyDataInit>

08000600 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000600:	4b0c      	ldr	r3, [pc, #48]	; (8000634 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000602:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000604:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000606:	3104      	adds	r1, #4

08000608 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000608:	480b      	ldr	r0, [pc, #44]	; (8000638 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800060a:	4b0c      	ldr	r3, [pc, #48]	; (800063c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800060c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800060e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000610:	d3f6      	bcc.n	8000600 <CopyDataInit>
  ldr  r2, =_sbss
 8000612:	4a0b      	ldr	r2, [pc, #44]	; (8000640 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000614:	e002      	b.n	800061c <LoopFillZerobss>

08000616 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000616:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000618:	f842 3b04 	str.w	r3, [r2], #4

0800061c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800061c:	4b09      	ldr	r3, [pc, #36]	; (8000644 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800061e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000620:	d3f9      	bcc.n	8000616 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000622:	f000 f813 	bl	800064c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000626:	f000 f847 	bl	80006b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800062a:	f7ff fe1b 	bl	8000264 <main>
  bx  lr    
 800062e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000630:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000634:	08000720 	.word	0x08000720
  ldr  r0, =_sdata
 8000638:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800063c:	20000000 	.word	0x20000000
  ldr  r2, =_sbss
 8000640:	20000000 	.word	0x20000000
  ldr  r3, = _ebss
 8000644:	20000024 	.word	0x20000024

08000648 <BusFault_Handler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000648:	e7fe      	b.n	8000648 <BusFault_Handler>
	...

0800064c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800064c:	b480      	push	{r7}
 800064e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000650:	4a16      	ldr	r2, [pc, #88]	; (80006ac <SystemInit+0x60>)
 8000652:	4b16      	ldr	r3, [pc, #88]	; (80006ac <SystemInit+0x60>)
 8000654:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000658:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800065c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000660:	4a13      	ldr	r2, [pc, #76]	; (80006b0 <SystemInit+0x64>)
 8000662:	4b13      	ldr	r3, [pc, #76]	; (80006b0 <SystemInit+0x64>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	f043 0301 	orr.w	r3, r3, #1
 800066a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800066c:	4b10      	ldr	r3, [pc, #64]	; (80006b0 <SystemInit+0x64>)
 800066e:	2200      	movs	r2, #0
 8000670:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000672:	4a0f      	ldr	r2, [pc, #60]	; (80006b0 <SystemInit+0x64>)
 8000674:	4b0e      	ldr	r3, [pc, #56]	; (80006b0 <SystemInit+0x64>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800067c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000680:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000682:	4b0b      	ldr	r3, [pc, #44]	; (80006b0 <SystemInit+0x64>)
 8000684:	4a0b      	ldr	r2, [pc, #44]	; (80006b4 <SystemInit+0x68>)
 8000686:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000688:	4a09      	ldr	r2, [pc, #36]	; (80006b0 <SystemInit+0x64>)
 800068a:	4b09      	ldr	r3, [pc, #36]	; (80006b0 <SystemInit+0x64>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000692:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000694:	4b06      	ldr	r3, [pc, #24]	; (80006b0 <SystemInit+0x64>)
 8000696:	2200      	movs	r2, #0
 8000698:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800069a:	4b04      	ldr	r3, [pc, #16]	; (80006ac <SystemInit+0x60>)
 800069c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80006a0:	609a      	str	r2, [r3, #8]
#endif
}
 80006a2:	bf00      	nop
 80006a4:	46bd      	mov	sp, r7
 80006a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006aa:	4770      	bx	lr
 80006ac:	e000ed00 	.word	0xe000ed00
 80006b0:	40023800 	.word	0x40023800
 80006b4:	24003010 	.word	0x24003010

080006b8 <__libc_init_array>:
 80006b8:	b570      	push	{r4, r5, r6, lr}
 80006ba:	4e0d      	ldr	r6, [pc, #52]	; (80006f0 <__libc_init_array+0x38>)
 80006bc:	4c0d      	ldr	r4, [pc, #52]	; (80006f4 <__libc_init_array+0x3c>)
 80006be:	1ba4      	subs	r4, r4, r6
 80006c0:	10a4      	asrs	r4, r4, #2
 80006c2:	2500      	movs	r5, #0
 80006c4:	42a5      	cmp	r5, r4
 80006c6:	d109      	bne.n	80006dc <__libc_init_array+0x24>
 80006c8:	4e0b      	ldr	r6, [pc, #44]	; (80006f8 <__libc_init_array+0x40>)
 80006ca:	4c0c      	ldr	r4, [pc, #48]	; (80006fc <__libc_init_array+0x44>)
 80006cc:	f000 f818 	bl	8000700 <_init>
 80006d0:	1ba4      	subs	r4, r4, r6
 80006d2:	10a4      	asrs	r4, r4, #2
 80006d4:	2500      	movs	r5, #0
 80006d6:	42a5      	cmp	r5, r4
 80006d8:	d105      	bne.n	80006e6 <__libc_init_array+0x2e>
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80006e0:	4798      	blx	r3
 80006e2:	3501      	adds	r5, #1
 80006e4:	e7ee      	b.n	80006c4 <__libc_init_array+0xc>
 80006e6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80006ea:	4798      	blx	r3
 80006ec:	3501      	adds	r5, #1
 80006ee:	e7f2      	b.n	80006d6 <__libc_init_array+0x1e>
 80006f0:	08000718 	.word	0x08000718
 80006f4:	08000718 	.word	0x08000718
 80006f8:	08000718 	.word	0x08000718
 80006fc:	0800071c 	.word	0x0800071c

08000700 <_init>:
 8000700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000702:	bf00      	nop
 8000704:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000706:	bc08      	pop	{r3}
 8000708:	469e      	mov	lr, r3
 800070a:	4770      	bx	lr

0800070c <_fini>:
 800070c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800070e:	bf00      	nop
 8000710:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000712:	bc08      	pop	{r3}
 8000714:	469e      	mov	lr, r3
 8000716:	4770      	bx	lr
