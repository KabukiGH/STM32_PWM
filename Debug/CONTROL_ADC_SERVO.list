
CONTROL_ADC_SERVO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000408  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080005a0  080005a0  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  080005a0  080005a0  000105a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080005a4  080005a4  000105a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000008  20000000  080005a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000024  20000008  080005b0  00020008  2**2
                  ALLOC
  7 ._user_heap_stack 00000400  2000002c  080005b0  0002002c  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
  9 .debug_info   00001079  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000377  00000000  00000000  000210b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000000d0  00000000  00000000  00021428  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  000214f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00000509  00000000  00000000  000215a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00000901  00000000  00000000  00021aa9  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  000223aa  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00000254  00000000  00000000  00022428  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      0000003f  00000000  00000000  0002267c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000008 	.word	0x20000008
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000588 	.word	0x08000588

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000000c 	.word	0x2000000c
 80001d4:	08000588 	.word	0x08000588

080001d8 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80001d8:	b480      	push	{r7}
 80001da:	b083      	sub	sp, #12
 80001dc:	af00      	add	r7, sp, #0
 80001de:	4603      	mov	r3, r0
 80001e0:	6039      	str	r1, [r7, #0]
 80001e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80001e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001e8:	2b00      	cmp	r3, #0
 80001ea:	da0b      	bge.n	8000204 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001ec:	490d      	ldr	r1, [pc, #52]	; (8000224 <NVIC_SetPriority+0x4c>)
 80001ee:	79fb      	ldrb	r3, [r7, #7]
 80001f0:	f003 030f 	and.w	r3, r3, #15
 80001f4:	3b04      	subs	r3, #4
 80001f6:	683a      	ldr	r2, [r7, #0]
 80001f8:	b2d2      	uxtb	r2, r2
 80001fa:	0112      	lsls	r2, r2, #4
 80001fc:	b2d2      	uxtb	r2, r2
 80001fe:	440b      	add	r3, r1
 8000200:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000202:	e009      	b.n	8000218 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000204:	4908      	ldr	r1, [pc, #32]	; (8000228 <NVIC_SetPriority+0x50>)
 8000206:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800020a:	683a      	ldr	r2, [r7, #0]
 800020c:	b2d2      	uxtb	r2, r2
 800020e:	0112      	lsls	r2, r2, #4
 8000210:	b2d2      	uxtb	r2, r2
 8000212:	440b      	add	r3, r1
 8000214:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000218:	bf00      	nop
 800021a:	370c      	adds	r7, #12
 800021c:	46bd      	mov	sp, r7
 800021e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000222:	4770      	bx	lr
 8000224:	e000ed00 	.word	0xe000ed00
 8000228:	e000e100 	.word	0xe000e100

0800022c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800022c:	b580      	push	{r7, lr}
 800022e:	b082      	sub	sp, #8
 8000230:	af00      	add	r7, sp, #0
 8000232:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	3b01      	subs	r3, #1
 8000238:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800023c:	d301      	bcc.n	8000242 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800023e:	2301      	movs	r3, #1
 8000240:	e00f      	b.n	8000262 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000242:	4a0a      	ldr	r2, [pc, #40]	; (800026c <SysTick_Config+0x40>)
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	3b01      	subs	r3, #1
 8000248:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800024a:	210f      	movs	r1, #15
 800024c:	f04f 30ff 	mov.w	r0, #4294967295
 8000250:	f7ff ffc2 	bl	80001d8 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000254:	4b05      	ldr	r3, [pc, #20]	; (800026c <SysTick_Config+0x40>)
 8000256:	2200      	movs	r2, #0
 8000258:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800025a:	4b04      	ldr	r3, [pc, #16]	; (800026c <SysTick_Config+0x40>)
 800025c:	2207      	movs	r2, #7
 800025e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000260:	2300      	movs	r3, #0
}
 8000262:	4618      	mov	r0, r3
 8000264:	3708      	adds	r7, #8
 8000266:	46bd      	mov	sp, r7
 8000268:	bd80      	pop	{r7, pc}
 800026a:	bf00      	nop
 800026c:	e000e010 	.word	0xe000e010

08000270 <ADC_WaitForConv>:
void DMA_Init (void);
uint32_t mapping(uint32_t au32_IN, uint32_t au32_INmin, uint32_t au32_INmax, uint32_t au32_OUTmin, uint32_t au32_OUTmax);


void ADC_WaitForConv (void)
{
 8000270:	b480      	push	{r7}
 8000272:	af00      	add	r7, sp, #0
	/*************************************************
	EOC Flag will be set, once the conversion is finished
	*************************************************/
	while (!(ADC1->SR & (1<<1)));  // wait for EOC flag to set
 8000274:	bf00      	nop
 8000276:	4b05      	ldr	r3, [pc, #20]	; (800028c <ADC_WaitForConv+0x1c>)
 8000278:	681b      	ldr	r3, [r3, #0]
 800027a:	f003 0302 	and.w	r3, r3, #2
 800027e:	2b00      	cmp	r3, #0
 8000280:	d0f9      	beq.n	8000276 <ADC_WaitForConv+0x6>
}
 8000282:	bf00      	nop
 8000284:	46bd      	mov	sp, r7
 8000286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800028a:	4770      	bx	lr
 800028c:	40012000 	.word	0x40012000

08000290 <ADC_GetVal>:

uint16_t ADC_GetVal (void)
{
 8000290:	b480      	push	{r7}
 8000292:	af00      	add	r7, sp, #0
	return ADC1->DR;  // Read the Data Register
 8000294:	4b03      	ldr	r3, [pc, #12]	; (80002a4 <ADC_GetVal+0x14>)
 8000296:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000298:	b29b      	uxth	r3, r3
}
 800029a:	4618      	mov	r0, r3
 800029c:	46bd      	mov	sp, r7
 800029e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a2:	4770      	bx	lr
 80002a4:	40012000 	.word	0x40012000

080002a8 <Delay_ms>:

void Delay_ms(uint16_t time_ms)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b082      	sub	sp, #8
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	4603      	mov	r3, r0
 80002b0:	80fb      	strh	r3, [r7, #6]
	static int config_flag = 1;
	msTicks=0;
 80002b2:	4b0e      	ldr	r3, [pc, #56]	; (80002ec <Delay_ms+0x44>)
 80002b4:	2200      	movs	r2, #0
 80002b6:	801a      	strh	r2, [r3, #0]

	if(config_flag)
 80002b8:	4b0d      	ldr	r3, [pc, #52]	; (80002f0 <Delay_ms+0x48>)
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d00b      	beq.n	80002d8 <Delay_ms+0x30>
	{
		SysTick_Config(SystemCoreClock/1000); // set interrupt period every 1ms
 80002c0:	4b0c      	ldr	r3, [pc, #48]	; (80002f4 <Delay_ms+0x4c>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	4a0c      	ldr	r2, [pc, #48]	; (80002f8 <Delay_ms+0x50>)
 80002c6:	fba2 2303 	umull	r2, r3, r2, r3
 80002ca:	099b      	lsrs	r3, r3, #6
 80002cc:	4618      	mov	r0, r3
 80002ce:	f7ff ffad 	bl	800022c <SysTick_Config>
		config_flag = 0;
 80002d2:	4b07      	ldr	r3, [pc, #28]	; (80002f0 <Delay_ms+0x48>)
 80002d4:	2200      	movs	r2, #0
 80002d6:	601a      	str	r2, [r3, #0]
	}

	while(msTicks<time_ms);
 80002d8:	bf00      	nop
 80002da:	4b04      	ldr	r3, [pc, #16]	; (80002ec <Delay_ms+0x44>)
 80002dc:	881b      	ldrh	r3, [r3, #0]
 80002de:	88fa      	ldrh	r2, [r7, #6]
 80002e0:	429a      	cmp	r2, r3
 80002e2:	d8fa      	bhi.n	80002da <Delay_ms+0x32>

}
 80002e4:	bf00      	nop
 80002e6:	3708      	adds	r7, #8
 80002e8:	46bd      	mov	sp, r7
 80002ea:	bd80      	pop	{r7, pc}
 80002ec:	20000028 	.word	0x20000028
 80002f0:	20000000 	.word	0x20000000
 80002f4:	20000004 	.word	0x20000004
 80002f8:	10624dd3 	.word	0x10624dd3

080002fc <main>:

int main(void)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b084      	sub	sp, #16
 8000300:	af02      	add	r7, sp, #8

	ADC_Init ();
 8000302:	f000 f837 	bl	8000374 <ADC_Init>
	ADC_Enable ();
 8000306:	f000 f873 	bl	80003f0 <ADC_Enable>
	//DMA_Init ();

	//DMA_Config ();
	ADC_Start ();
 800030a:	f000 f88b 	bl	8000424 <ADC_Start>

	while (1)
	{

	ADC_VAL = ADC_GetVal();
 800030e:	f7ff ffbf 	bl	8000290 <ADC_GetVal>
 8000312:	4603      	mov	r3, r0
 8000314:	461a      	mov	r2, r3
 8000316:	4b0d      	ldr	r3, [pc, #52]	; (800034c <main+0x50>)
 8000318:	801a      	strh	r2, [r3, #0]
	ADC_WaitForConv();
 800031a:	f7ff ffa9 	bl	8000270 <ADC_WaitForConv>
	// Map The ADC Result To Servo Pulse Width
	angle = mapping(ADC_VAL, 0, 4096, 0, 180);
 800031e:	4b0b      	ldr	r3, [pc, #44]	; (800034c <main+0x50>)
 8000320:	881b      	ldrh	r3, [r3, #0]
 8000322:	b29b      	uxth	r3, r3
 8000324:	4618      	mov	r0, r3
 8000326:	23b4      	movs	r3, #180	; 0xb4
 8000328:	9300      	str	r3, [sp, #0]
 800032a:	2300      	movs	r3, #0
 800032c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000330:	2100      	movs	r1, #0
 8000332:	f000 f889 	bl	8000448 <mapping>
 8000336:	4603      	mov	r3, r0
 8000338:	b29a      	uxth	r2, r3
 800033a:	4b05      	ldr	r3, [pc, #20]	; (8000350 <main+0x54>)
 800033c:	801a      	strh	r2, [r3, #0]
	Delay_ms (1000);
 800033e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000342:	f7ff ffb1 	bl	80002a8 <Delay_ms>

	int breakPtr = 0;
 8000346:	2300      	movs	r3, #0
 8000348:	607b      	str	r3, [r7, #4]
	{
 800034a:	e7e0      	b.n	800030e <main+0x12>
 800034c:	20000024 	.word	0x20000024
 8000350:	20000026 	.word	0x20000026

08000354 <SysTick_Handler>:
	}
}

/* Interrupts */
void SysTick_Handler(void)
{
 8000354:	b480      	push	{r7}
 8000356:	af00      	add	r7, sp, #0
msTicks++;
 8000358:	4b05      	ldr	r3, [pc, #20]	; (8000370 <SysTick_Handler+0x1c>)
 800035a:	881b      	ldrh	r3, [r3, #0]
 800035c:	3301      	adds	r3, #1
 800035e:	b29a      	uxth	r2, r3
 8000360:	4b03      	ldr	r3, [pc, #12]	; (8000370 <SysTick_Handler+0x1c>)
 8000362:	801a      	strh	r2, [r3, #0]
}
 8000364:	bf00      	nop
 8000366:	46bd      	mov	sp, r7
 8000368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800036c:	4770      	bx	lr
 800036e:	bf00      	nop
 8000370:	20000028 	.word	0x20000028

08000374 <ADC_Init>:


/* Private functions */

void ADC_Init (void)
{
 8000374:	b480      	push	{r7}
 8000376:	af00      	add	r7, sp, #0
	5. Set the Regular channel sequence length in ADC_SQR1 and set Channel 1 in ADC_SQR3
	7. Set the Respective GPIO PINs in the Analog Mode
	************************************************/

//1. Enable ADC and GPIO clock
	RCC->APB2ENR |= (1<<8);  // enable ADC1 clock
 8000378:	4a1a      	ldr	r2, [pc, #104]	; (80003e4 <ADC_Init+0x70>)
 800037a:	4b1a      	ldr	r3, [pc, #104]	; (80003e4 <ADC_Init+0x70>)
 800037c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800037e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000382:	6453      	str	r3, [r2, #68]	; 0x44
	RCC->AHB1ENR |= (1<<0);  // enable GPIOA clock
 8000384:	4a17      	ldr	r2, [pc, #92]	; (80003e4 <ADC_Init+0x70>)
 8000386:	4b17      	ldr	r3, [pc, #92]	; (80003e4 <ADC_Init+0x70>)
 8000388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800038a:	f043 0301 	orr.w	r3, r3, #1
 800038e:	6313      	str	r3, [r2, #48]	; 0x30

//2. Set Resolution in the Control Register 1 (CR1)
	ADC1->CR1 &= ~(1<<24);   // 12 bit RES
 8000390:	4a15      	ldr	r2, [pc, #84]	; (80003e8 <ADC_Init+0x74>)
 8000392:	4b15      	ldr	r3, [pc, #84]	; (80003e8 <ADC_Init+0x74>)
 8000394:	685b      	ldr	r3, [r3, #4]
 8000396:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800039a:	6053      	str	r3, [r2, #4]

//3. Set the Continuous Conversion, enable DMA and Data Alignment in Control Reg 2 (CR2)
    ADC1->CR2 |= (1<<1);     // enable continuous conversion mode
 800039c:	4a12      	ldr	r2, [pc, #72]	; (80003e8 <ADC_Init+0x74>)
 800039e:	4b12      	ldr	r3, [pc, #72]	; (80003e8 <ADC_Init+0x74>)
 80003a0:	689b      	ldr	r3, [r3, #8]
 80003a2:	f043 0302 	orr.w	r3, r3, #2
 80003a6:	6093      	str	r3, [r2, #8]
   // ADC1->CR2 |= (1<<10);    // EOC after each conversion
	ADC1->CR2 &= ~(1<<11);   // Data Alignment RIGHT
 80003a8:	4a0f      	ldr	r2, [pc, #60]	; (80003e8 <ADC_Init+0x74>)
 80003aa:	4b0f      	ldr	r3, [pc, #60]	; (80003e8 <ADC_Init+0x74>)
 80003ac:	689b      	ldr	r3, [r3, #8]
 80003ae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80003b2:	6093      	str	r3, [r2, #8]

//4. Set the Sampling Time for the channels
	//ADC1->SMPR2 &= ~(1<<3);  // Sampling time of 3 cycles for channel 1

//5. Set the Regular channel sequence length in ADC_SQR1
	ADC1->SQR1 &= ~(15<<20);   // SQR1_L =0 for 1 conversions
 80003b4:	4a0c      	ldr	r2, [pc, #48]	; (80003e8 <ADC_Init+0x74>)
 80003b6:	4b0c      	ldr	r3, [pc, #48]	; (80003e8 <ADC_Init+0x74>)
 80003b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80003ba:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80003be:	62d3      	str	r3, [r2, #44]	; 0x2c

	// Set Channel Sequence
	ADC1->SQR3 |= (1<<0);  // SEQ1 for Channel 1
 80003c0:	4a09      	ldr	r2, [pc, #36]	; (80003e8 <ADC_Init+0x74>)
 80003c2:	4b09      	ldr	r3, [pc, #36]	; (80003e8 <ADC_Init+0x74>)
 80003c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80003c6:	f043 0301 	orr.w	r3, r3, #1
 80003ca:	6353      	str	r3, [r2, #52]	; 0x34

//7. Set the Respective GPIO PINs in the Analog Mode
	GPIOA->MODER |= (3<<2);  // analog mode for PA 1 (channel 1) PIN A1
 80003cc:	4a07      	ldr	r2, [pc, #28]	; (80003ec <ADC_Init+0x78>)
 80003ce:	4b07      	ldr	r3, [pc, #28]	; (80003ec <ADC_Init+0x78>)
 80003d0:	681b      	ldr	r3, [r3, #0]
 80003d2:	f043 030c 	orr.w	r3, r3, #12
 80003d6:	6013      	str	r3, [r2, #0]

}
 80003d8:	bf00      	nop
 80003da:	46bd      	mov	sp, r7
 80003dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e0:	4770      	bx	lr
 80003e2:	bf00      	nop
 80003e4:	40023800 	.word	0x40023800
 80003e8:	40012000 	.word	0x40012000
 80003ec:	40020000 	.word	0x40020000

080003f0 <ADC_Enable>:


void ADC_Enable (void)
{
 80003f0:	b480      	push	{r7}
 80003f2:	b083      	sub	sp, #12
 80003f4:	af00      	add	r7, sp, #0
	/************** STEPS TO FOLLOW *****************
	1. Enable the ADC by setting ADON bit in CR2
	2. Wait for ADC to stabilize (approx 10us)
	************************************************/
	ADC1->CR2 |= 1<<0;   // ADON =1 enable ADC1
 80003f6:	4a0a      	ldr	r2, [pc, #40]	; (8000420 <ADC_Enable+0x30>)
 80003f8:	4b09      	ldr	r3, [pc, #36]	; (8000420 <ADC_Enable+0x30>)
 80003fa:	689b      	ldr	r3, [r3, #8]
 80003fc:	f043 0301 	orr.w	r3, r3, #1
 8000400:	6093      	str	r3, [r2, #8]
	uint32_t delay = 10000;
 8000402:	f242 7310 	movw	r3, #10000	; 0x2710
 8000406:	607b      	str	r3, [r7, #4]
	while (delay--);
 8000408:	bf00      	nop
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	1e5a      	subs	r2, r3, #1
 800040e:	607a      	str	r2, [r7, #4]
 8000410:	2b00      	cmp	r3, #0
 8000412:	d1fa      	bne.n	800040a <ADC_Enable+0x1a>
}
 8000414:	bf00      	nop
 8000416:	370c      	adds	r7, #12
 8000418:	46bd      	mov	sp, r7
 800041a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800041e:	4770      	bx	lr
 8000420:	40012000 	.word	0x40012000

08000424 <ADC_Start>:
	DMA2_Stream0->CR |= (1<<0);  // EN =1
}


void ADC_Start(void)
{
 8000424:	b480      	push	{r7}
 8000426:	af00      	add	r7, sp, #0
	/************** STEPS TO FOLLOW *****************
	1. Clear the Status register
	2. Start the Conversion by Setting the SWSTART bit in CR2
	*************************************************/
	ADC1->SR = 0;                      // Clear Status register
 8000428:	4b06      	ldr	r3, [pc, #24]	; (8000444 <ADC_Start+0x20>)
 800042a:	2200      	movs	r2, #0
 800042c:	601a      	str	r2, [r3, #0]
	ADC1->CR2 |= (1<<30);                // Start conversion for regular channel
 800042e:	4a05      	ldr	r2, [pc, #20]	; (8000444 <ADC_Start+0x20>)
 8000430:	4b04      	ldr	r3, [pc, #16]	; (8000444 <ADC_Start+0x20>)
 8000432:	689b      	ldr	r3, [r3, #8]
 8000434:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000438:	6093      	str	r3, [r2, #8]
}
 800043a:	bf00      	nop
 800043c:	46bd      	mov	sp, r7
 800043e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000442:	4770      	bx	lr
 8000444:	40012000 	.word	0x40012000

08000448 <mapping>:

}


uint32_t mapping(uint32_t au32_IN, uint32_t au32_INmin, uint32_t au32_INmax, uint32_t au32_OUTmin, uint32_t au32_OUTmax)
{
 8000448:	b480      	push	{r7}
 800044a:	b085      	sub	sp, #20
 800044c:	af00      	add	r7, sp, #0
 800044e:	60f8      	str	r0, [r7, #12]
 8000450:	60b9      	str	r1, [r7, #8]
 8000452:	607a      	str	r2, [r7, #4]
 8000454:	603b      	str	r3, [r7, #0]
    return ((((au32_IN - au32_INmin)*(au32_OUTmax - au32_OUTmin))/(au32_INmax - au32_INmin)) + au32_OUTmin);
 8000456:	68fa      	ldr	r2, [r7, #12]
 8000458:	68bb      	ldr	r3, [r7, #8]
 800045a:	1ad3      	subs	r3, r2, r3
 800045c:	69b9      	ldr	r1, [r7, #24]
 800045e:	683a      	ldr	r2, [r7, #0]
 8000460:	1a8a      	subs	r2, r1, r2
 8000462:	fb02 f203 	mul.w	r2, r2, r3
 8000466:	6879      	ldr	r1, [r7, #4]
 8000468:	68bb      	ldr	r3, [r7, #8]
 800046a:	1acb      	subs	r3, r1, r3
 800046c:	fbb2 f2f3 	udiv	r2, r2, r3
 8000470:	683b      	ldr	r3, [r7, #0]
 8000472:	4413      	add	r3, r2
}
 8000474:	4618      	mov	r0, r3
 8000476:	3714      	adds	r7, #20
 8000478:	46bd      	mov	sp, r7
 800047a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800047e:	4770      	bx	lr

08000480 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000480:	f8df d034 	ldr.w	sp, [pc, #52]	; 80004b8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000484:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000486:	e003      	b.n	8000490 <LoopCopyDataInit>

08000488 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000488:	4b0c      	ldr	r3, [pc, #48]	; (80004bc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800048a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800048c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800048e:	3104      	adds	r1, #4

08000490 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000490:	480b      	ldr	r0, [pc, #44]	; (80004c0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000492:	4b0c      	ldr	r3, [pc, #48]	; (80004c4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000494:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000496:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000498:	d3f6      	bcc.n	8000488 <CopyDataInit>
  ldr  r2, =_sbss
 800049a:	4a0b      	ldr	r2, [pc, #44]	; (80004c8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800049c:	e002      	b.n	80004a4 <LoopFillZerobss>

0800049e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800049e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80004a0:	f842 3b04 	str.w	r3, [r2], #4

080004a4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80004a4:	4b09      	ldr	r3, [pc, #36]	; (80004cc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80004a6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80004a8:	d3f9      	bcc.n	800049e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80004aa:	f000 f813 	bl	80004d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80004ae:	f000 f847 	bl	8000540 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80004b2:	f7ff ff23 	bl	80002fc <main>
  bx  lr    
 80004b6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80004b8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80004bc:	080005a8 	.word	0x080005a8
  ldr  r0, =_sdata
 80004c0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80004c4:	20000008 	.word	0x20000008
  ldr  r2, =_sbss
 80004c8:	20000008 	.word	0x20000008
  ldr  r3, = _ebss
 80004cc:	2000002c 	.word	0x2000002c

080004d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80004d0:	e7fe      	b.n	80004d0 <ADC_IRQHandler>
	...

080004d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80004d4:	b480      	push	{r7}
 80004d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80004d8:	4a16      	ldr	r2, [pc, #88]	; (8000534 <SystemInit+0x60>)
 80004da:	4b16      	ldr	r3, [pc, #88]	; (8000534 <SystemInit+0x60>)
 80004dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80004e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80004e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80004e8:	4a13      	ldr	r2, [pc, #76]	; (8000538 <SystemInit+0x64>)
 80004ea:	4b13      	ldr	r3, [pc, #76]	; (8000538 <SystemInit+0x64>)
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	f043 0301 	orr.w	r3, r3, #1
 80004f2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80004f4:	4b10      	ldr	r3, [pc, #64]	; (8000538 <SystemInit+0x64>)
 80004f6:	2200      	movs	r2, #0
 80004f8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80004fa:	4a0f      	ldr	r2, [pc, #60]	; (8000538 <SystemInit+0x64>)
 80004fc:	4b0e      	ldr	r3, [pc, #56]	; (8000538 <SystemInit+0x64>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000504:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000508:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800050a:	4b0b      	ldr	r3, [pc, #44]	; (8000538 <SystemInit+0x64>)
 800050c:	4a0b      	ldr	r2, [pc, #44]	; (800053c <SystemInit+0x68>)
 800050e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000510:	4a09      	ldr	r2, [pc, #36]	; (8000538 <SystemInit+0x64>)
 8000512:	4b09      	ldr	r3, [pc, #36]	; (8000538 <SystemInit+0x64>)
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800051a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800051c:	4b06      	ldr	r3, [pc, #24]	; (8000538 <SystemInit+0x64>)
 800051e:	2200      	movs	r2, #0
 8000520:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000522:	4b04      	ldr	r3, [pc, #16]	; (8000534 <SystemInit+0x60>)
 8000524:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000528:	609a      	str	r2, [r3, #8]
#endif
}
 800052a:	bf00      	nop
 800052c:	46bd      	mov	sp, r7
 800052e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000532:	4770      	bx	lr
 8000534:	e000ed00 	.word	0xe000ed00
 8000538:	40023800 	.word	0x40023800
 800053c:	24003010 	.word	0x24003010

08000540 <__libc_init_array>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	4e0d      	ldr	r6, [pc, #52]	; (8000578 <__libc_init_array+0x38>)
 8000544:	4c0d      	ldr	r4, [pc, #52]	; (800057c <__libc_init_array+0x3c>)
 8000546:	1ba4      	subs	r4, r4, r6
 8000548:	10a4      	asrs	r4, r4, #2
 800054a:	2500      	movs	r5, #0
 800054c:	42a5      	cmp	r5, r4
 800054e:	d109      	bne.n	8000564 <__libc_init_array+0x24>
 8000550:	4e0b      	ldr	r6, [pc, #44]	; (8000580 <__libc_init_array+0x40>)
 8000552:	4c0c      	ldr	r4, [pc, #48]	; (8000584 <__libc_init_array+0x44>)
 8000554:	f000 f818 	bl	8000588 <_init>
 8000558:	1ba4      	subs	r4, r4, r6
 800055a:	10a4      	asrs	r4, r4, #2
 800055c:	2500      	movs	r5, #0
 800055e:	42a5      	cmp	r5, r4
 8000560:	d105      	bne.n	800056e <__libc_init_array+0x2e>
 8000562:	bd70      	pop	{r4, r5, r6, pc}
 8000564:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000568:	4798      	blx	r3
 800056a:	3501      	adds	r5, #1
 800056c:	e7ee      	b.n	800054c <__libc_init_array+0xc>
 800056e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000572:	4798      	blx	r3
 8000574:	3501      	adds	r5, #1
 8000576:	e7f2      	b.n	800055e <__libc_init_array+0x1e>
 8000578:	080005a0 	.word	0x080005a0
 800057c:	080005a0 	.word	0x080005a0
 8000580:	080005a0 	.word	0x080005a0
 8000584:	080005a4 	.word	0x080005a4

08000588 <_init>:
 8000588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800058a:	bf00      	nop
 800058c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800058e:	bc08      	pop	{r3}
 8000590:	469e      	mov	lr, r3
 8000592:	4770      	bx	lr

08000594 <_fini>:
 8000594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000596:	bf00      	nop
 8000598:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800059a:	bc08      	pop	{r3}
 800059c:	469e      	mov	lr, r3
 800059e:	4770      	bx	lr
