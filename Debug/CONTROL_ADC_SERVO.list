
CONTROL_ADC_SERVO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002f0  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000488  08000490  00010490  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  08000488  08000488  00010488  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800048c  0800048c  0001048c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000000  20000000  20000000  00010490  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000020  20000000  08000490  00020000  2**2
                  ALLOC
  7 ._user_heap_stack 00000400  20000020  08000490  00020020  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00010490  2**0
                  CONTENTS, READONLY
  9 .debug_info   00000ae5  00000000  00000000  000104c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000002b7  00000000  00000000  00010fa5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000000b0  00000000  00000000  00011260  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  00011310  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000048c  00000000  00000000  00011398  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000004a6  00000000  00000000  00011824  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  00011cca  2**0
                  CONTENTS, READONLY
 16 .debug_frame  000001c4  00000000  00000000  00011d48  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      0000003f  00000000  00000000  00011f0c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000470 	.word	0x08000470

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	08000470 	.word	0x08000470

080001d8 <ADC_WaitForConv>:
void DMA_Init (void);
uint32_t mapping(uint32_t au32_IN, uint32_t au32_INmin, uint32_t au32_INmax, uint32_t au32_OUTmin, uint32_t au32_OUTmax);


void ADC_WaitForConv (void)
{
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
	/*************************************************
	EOC Flag will be set, once the conversion is finished
	*************************************************/
	while (!(ADC1->SR & (1<<1)));  // wait for EOC flag to set
 80001dc:	bf00      	nop
 80001de:	4b05      	ldr	r3, [pc, #20]	; (80001f4 <ADC_WaitForConv+0x1c>)
 80001e0:	681b      	ldr	r3, [r3, #0]
 80001e2:	f003 0302 	and.w	r3, r3, #2
 80001e6:	2b00      	cmp	r3, #0
 80001e8:	d0f9      	beq.n	80001de <ADC_WaitForConv+0x6>
}
 80001ea:	bf00      	nop
 80001ec:	46bd      	mov	sp, r7
 80001ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f2:	4770      	bx	lr
 80001f4:	40012000 	.word	0x40012000

080001f8 <ADC_GetVal>:

uint16_t ADC_GetVal (void)
{
 80001f8:	b480      	push	{r7}
 80001fa:	af00      	add	r7, sp, #0
	return ADC1->DR;  // Read the Data Register
 80001fc:	4b03      	ldr	r3, [pc, #12]	; (800020c <ADC_GetVal+0x14>)
 80001fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000200:	b29b      	uxth	r3, r3
}
 8000202:	4618      	mov	r0, r3
 8000204:	46bd      	mov	sp, r7
 8000206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800020a:	4770      	bx	lr
 800020c:	40012000 	.word	0x40012000

08000210 <main>:

int main(void)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b082      	sub	sp, #8
 8000214:	af02      	add	r7, sp, #8

	ADC_Init ();
 8000216:	f000 f821 	bl	800025c <ADC_Init>
	ADC_Enable ();
 800021a:	f000 f85d 	bl	80002d8 <ADC_Enable>
	//DMA_Init ();

	//DMA_Config ();
	ADC_Start ();
 800021e:	f000 f875 	bl	800030c <ADC_Start>

	while (1)
	{

	ADC_VAL = ADC_GetVal();
 8000222:	f7ff ffe9 	bl	80001f8 <ADC_GetVal>
 8000226:	4603      	mov	r3, r0
 8000228:	461a      	mov	r2, r3
 800022a:	4b0a      	ldr	r3, [pc, #40]	; (8000254 <main+0x44>)
 800022c:	801a      	strh	r2, [r3, #0]
	ADC_WaitForConv();
 800022e:	f7ff ffd3 	bl	80001d8 <ADC_WaitForConv>
	// Map The ADC Result To Servo Pulse Width
	angle = mapping(ADC_VAL, 0, 4096, 0, 180);
 8000232:	4b08      	ldr	r3, [pc, #32]	; (8000254 <main+0x44>)
 8000234:	881b      	ldrh	r3, [r3, #0]
 8000236:	b29b      	uxth	r3, r3
 8000238:	4618      	mov	r0, r3
 800023a:	23b4      	movs	r3, #180	; 0xb4
 800023c:	9300      	str	r3, [sp, #0]
 800023e:	2300      	movs	r3, #0
 8000240:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000244:	2100      	movs	r1, #0
 8000246:	f000 f873 	bl	8000330 <mapping>
 800024a:	4603      	mov	r3, r0
 800024c:	b29a      	uxth	r2, r3
 800024e:	4b02      	ldr	r3, [pc, #8]	; (8000258 <main+0x48>)
 8000250:	801a      	strh	r2, [r3, #0]
	ADC_VAL = ADC_GetVal();
 8000252:	e7e6      	b.n	8000222 <main+0x12>
 8000254:	2000001c 	.word	0x2000001c
 8000258:	2000001e 	.word	0x2000001e

0800025c <ADC_Init>:


/* Private functions */

void ADC_Init (void)
{
 800025c:	b480      	push	{r7}
 800025e:	af00      	add	r7, sp, #0
	5. Set the Regular channel sequence length in ADC_SQR1 and set Channel 1 in ADC_SQR3
	7. Set the Respective GPIO PINs in the Analog Mode
	************************************************/

//1. Enable ADC and GPIO clock
	RCC->APB2ENR |= (1<<8);  // enable ADC1 clock
 8000260:	4a1a      	ldr	r2, [pc, #104]	; (80002cc <ADC_Init+0x70>)
 8000262:	4b1a      	ldr	r3, [pc, #104]	; (80002cc <ADC_Init+0x70>)
 8000264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000266:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800026a:	6453      	str	r3, [r2, #68]	; 0x44
	RCC->AHB1ENR |= (1<<0);  // enable GPIOA clock
 800026c:	4a17      	ldr	r2, [pc, #92]	; (80002cc <ADC_Init+0x70>)
 800026e:	4b17      	ldr	r3, [pc, #92]	; (80002cc <ADC_Init+0x70>)
 8000270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000272:	f043 0301 	orr.w	r3, r3, #1
 8000276:	6313      	str	r3, [r2, #48]	; 0x30

//2. Set Resolution in the Control Register 1 (CR1)
	ADC1->CR1 &= ~(1<<24);   // 12 bit RES
 8000278:	4a15      	ldr	r2, [pc, #84]	; (80002d0 <ADC_Init+0x74>)
 800027a:	4b15      	ldr	r3, [pc, #84]	; (80002d0 <ADC_Init+0x74>)
 800027c:	685b      	ldr	r3, [r3, #4]
 800027e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000282:	6053      	str	r3, [r2, #4]

//3. Set the Continuous Conversion, enable DMA and Data Alignment in Control Reg 2 (CR2)
    ADC1->CR2 |= (1<<1);     // enable continuous conversion mode
 8000284:	4a12      	ldr	r2, [pc, #72]	; (80002d0 <ADC_Init+0x74>)
 8000286:	4b12      	ldr	r3, [pc, #72]	; (80002d0 <ADC_Init+0x74>)
 8000288:	689b      	ldr	r3, [r3, #8]
 800028a:	f043 0302 	orr.w	r3, r3, #2
 800028e:	6093      	str	r3, [r2, #8]
   // ADC1->CR2 |= (1<<10);    // EOC after each conversion
	ADC1->CR2 &= ~(1<<11);   // Data Alignment RIGHT
 8000290:	4a0f      	ldr	r2, [pc, #60]	; (80002d0 <ADC_Init+0x74>)
 8000292:	4b0f      	ldr	r3, [pc, #60]	; (80002d0 <ADC_Init+0x74>)
 8000294:	689b      	ldr	r3, [r3, #8]
 8000296:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800029a:	6093      	str	r3, [r2, #8]

//4. Set the Sampling Time for the channels
	//ADC1->SMPR2 &= ~(1<<3);  // Sampling time of 3 cycles for channel 1

//5. Set the Regular channel sequence length in ADC_SQR1
	ADC1->SQR1 &= ~(15<<20);   // SQR1_L =0 for 1 conversions
 800029c:	4a0c      	ldr	r2, [pc, #48]	; (80002d0 <ADC_Init+0x74>)
 800029e:	4b0c      	ldr	r3, [pc, #48]	; (80002d0 <ADC_Init+0x74>)
 80002a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80002a2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80002a6:	62d3      	str	r3, [r2, #44]	; 0x2c

	// Set Channel Sequence
	ADC1->SQR3 |= (1<<0);  // SEQ1 for Channel 1
 80002a8:	4a09      	ldr	r2, [pc, #36]	; (80002d0 <ADC_Init+0x74>)
 80002aa:	4b09      	ldr	r3, [pc, #36]	; (80002d0 <ADC_Init+0x74>)
 80002ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80002ae:	f043 0301 	orr.w	r3, r3, #1
 80002b2:	6353      	str	r3, [r2, #52]	; 0x34

//7. Set the Respective GPIO PINs in the Analog Mode
	GPIOA->MODER |= (3<<2);  // analog mode for PA 1 (channel 1) PIN A1
 80002b4:	4a07      	ldr	r2, [pc, #28]	; (80002d4 <ADC_Init+0x78>)
 80002b6:	4b07      	ldr	r3, [pc, #28]	; (80002d4 <ADC_Init+0x78>)
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	f043 030c 	orr.w	r3, r3, #12
 80002be:	6013      	str	r3, [r2, #0]

}
 80002c0:	bf00      	nop
 80002c2:	46bd      	mov	sp, r7
 80002c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c8:	4770      	bx	lr
 80002ca:	bf00      	nop
 80002cc:	40023800 	.word	0x40023800
 80002d0:	40012000 	.word	0x40012000
 80002d4:	40020000 	.word	0x40020000

080002d8 <ADC_Enable>:


void ADC_Enable (void)
{
 80002d8:	b480      	push	{r7}
 80002da:	b083      	sub	sp, #12
 80002dc:	af00      	add	r7, sp, #0
	/************** STEPS TO FOLLOW *****************
	1. Enable the ADC by setting ADON bit in CR2
	2. Wait for ADC to stabilize (approx 10us)
	************************************************/
	ADC1->CR2 |= 1<<0;   // ADON =1 enable ADC1
 80002de:	4a0a      	ldr	r2, [pc, #40]	; (8000308 <ADC_Enable+0x30>)
 80002e0:	4b09      	ldr	r3, [pc, #36]	; (8000308 <ADC_Enable+0x30>)
 80002e2:	689b      	ldr	r3, [r3, #8]
 80002e4:	f043 0301 	orr.w	r3, r3, #1
 80002e8:	6093      	str	r3, [r2, #8]
	uint32_t delay = 10000;
 80002ea:	f242 7310 	movw	r3, #10000	; 0x2710
 80002ee:	607b      	str	r3, [r7, #4]
	while (delay--);
 80002f0:	bf00      	nop
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	1e5a      	subs	r2, r3, #1
 80002f6:	607a      	str	r2, [r7, #4]
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d1fa      	bne.n	80002f2 <ADC_Enable+0x1a>
}
 80002fc:	bf00      	nop
 80002fe:	370c      	adds	r7, #12
 8000300:	46bd      	mov	sp, r7
 8000302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000306:	4770      	bx	lr
 8000308:	40012000 	.word	0x40012000

0800030c <ADC_Start>:
	DMA2_Stream0->CR |= (1<<0);  // EN =1
}


void ADC_Start(void)
{
 800030c:	b480      	push	{r7}
 800030e:	af00      	add	r7, sp, #0
	/************** STEPS TO FOLLOW *****************
	1. Clear the Status register
	2. Start the Conversion by Setting the SWSTART bit in CR2
	*************************************************/
	ADC1->SR = 0;                      // Clear Status register
 8000310:	4b06      	ldr	r3, [pc, #24]	; (800032c <ADC_Start+0x20>)
 8000312:	2200      	movs	r2, #0
 8000314:	601a      	str	r2, [r3, #0]
	ADC1->CR2 |= (1<<30);                // Start conversion for regular channel
 8000316:	4a05      	ldr	r2, [pc, #20]	; (800032c <ADC_Start+0x20>)
 8000318:	4b04      	ldr	r3, [pc, #16]	; (800032c <ADC_Start+0x20>)
 800031a:	689b      	ldr	r3, [r3, #8]
 800031c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000320:	6093      	str	r3, [r2, #8]
}
 8000322:	bf00      	nop
 8000324:	46bd      	mov	sp, r7
 8000326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800032a:	4770      	bx	lr
 800032c:	40012000 	.word	0x40012000

08000330 <mapping>:

}


uint32_t mapping(uint32_t au32_IN, uint32_t au32_INmin, uint32_t au32_INmax, uint32_t au32_OUTmin, uint32_t au32_OUTmax)
{
 8000330:	b480      	push	{r7}
 8000332:	b085      	sub	sp, #20
 8000334:	af00      	add	r7, sp, #0
 8000336:	60f8      	str	r0, [r7, #12]
 8000338:	60b9      	str	r1, [r7, #8]
 800033a:	607a      	str	r2, [r7, #4]
 800033c:	603b      	str	r3, [r7, #0]
    return ((((au32_IN - au32_INmin)*(au32_OUTmax - au32_OUTmin))/(au32_INmax - au32_INmin)) + au32_OUTmin);
 800033e:	68fa      	ldr	r2, [r7, #12]
 8000340:	68bb      	ldr	r3, [r7, #8]
 8000342:	1ad3      	subs	r3, r2, r3
 8000344:	69b9      	ldr	r1, [r7, #24]
 8000346:	683a      	ldr	r2, [r7, #0]
 8000348:	1a8a      	subs	r2, r1, r2
 800034a:	fb02 f203 	mul.w	r2, r2, r3
 800034e:	6879      	ldr	r1, [r7, #4]
 8000350:	68bb      	ldr	r3, [r7, #8]
 8000352:	1acb      	subs	r3, r1, r3
 8000354:	fbb2 f2f3 	udiv	r2, r2, r3
 8000358:	683b      	ldr	r3, [r7, #0]
 800035a:	4413      	add	r3, r2
}
 800035c:	4618      	mov	r0, r3
 800035e:	3714      	adds	r7, #20
 8000360:	46bd      	mov	sp, r7
 8000362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000366:	4770      	bx	lr

08000368 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000368:	f8df d034 	ldr.w	sp, [pc, #52]	; 80003a0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800036c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800036e:	e003      	b.n	8000378 <LoopCopyDataInit>

08000370 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000370:	4b0c      	ldr	r3, [pc, #48]	; (80003a4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000372:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000374:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000376:	3104      	adds	r1, #4

08000378 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000378:	480b      	ldr	r0, [pc, #44]	; (80003a8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800037a:	4b0c      	ldr	r3, [pc, #48]	; (80003ac <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800037c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800037e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000380:	d3f6      	bcc.n	8000370 <CopyDataInit>
  ldr  r2, =_sbss
 8000382:	4a0b      	ldr	r2, [pc, #44]	; (80003b0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000384:	e002      	b.n	800038c <LoopFillZerobss>

08000386 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000386:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000388:	f842 3b04 	str.w	r3, [r2], #4

0800038c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800038c:	4b09      	ldr	r3, [pc, #36]	; (80003b4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800038e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000390:	d3f9      	bcc.n	8000386 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000392:	f000 f813 	bl	80003bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000396:	f000 f847 	bl	8000428 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800039a:	f7ff ff39 	bl	8000210 <main>
  bx  lr    
 800039e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80003a0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80003a4:	08000490 	.word	0x08000490
  ldr  r0, =_sdata
 80003a8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80003ac:	20000000 	.word	0x20000000
  ldr  r2, =_sbss
 80003b0:	20000000 	.word	0x20000000
  ldr  r3, = _ebss
 80003b4:	20000020 	.word	0x20000020

080003b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80003b8:	e7fe      	b.n	80003b8 <ADC_IRQHandler>
	...

080003bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80003bc:	b480      	push	{r7}
 80003be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80003c0:	4a16      	ldr	r2, [pc, #88]	; (800041c <SystemInit+0x60>)
 80003c2:	4b16      	ldr	r3, [pc, #88]	; (800041c <SystemInit+0x60>)
 80003c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80003c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80003cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80003d0:	4a13      	ldr	r2, [pc, #76]	; (8000420 <SystemInit+0x64>)
 80003d2:	4b13      	ldr	r3, [pc, #76]	; (8000420 <SystemInit+0x64>)
 80003d4:	681b      	ldr	r3, [r3, #0]
 80003d6:	f043 0301 	orr.w	r3, r3, #1
 80003da:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80003dc:	4b10      	ldr	r3, [pc, #64]	; (8000420 <SystemInit+0x64>)
 80003de:	2200      	movs	r2, #0
 80003e0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80003e2:	4a0f      	ldr	r2, [pc, #60]	; (8000420 <SystemInit+0x64>)
 80003e4:	4b0e      	ldr	r3, [pc, #56]	; (8000420 <SystemInit+0x64>)
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80003ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80003f0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80003f2:	4b0b      	ldr	r3, [pc, #44]	; (8000420 <SystemInit+0x64>)
 80003f4:	4a0b      	ldr	r2, [pc, #44]	; (8000424 <SystemInit+0x68>)
 80003f6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80003f8:	4a09      	ldr	r2, [pc, #36]	; (8000420 <SystemInit+0x64>)
 80003fa:	4b09      	ldr	r3, [pc, #36]	; (8000420 <SystemInit+0x64>)
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000402:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000404:	4b06      	ldr	r3, [pc, #24]	; (8000420 <SystemInit+0x64>)
 8000406:	2200      	movs	r2, #0
 8000408:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800040a:	4b04      	ldr	r3, [pc, #16]	; (800041c <SystemInit+0x60>)
 800040c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000410:	609a      	str	r2, [r3, #8]
#endif
}
 8000412:	bf00      	nop
 8000414:	46bd      	mov	sp, r7
 8000416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800041a:	4770      	bx	lr
 800041c:	e000ed00 	.word	0xe000ed00
 8000420:	40023800 	.word	0x40023800
 8000424:	24003010 	.word	0x24003010

08000428 <__libc_init_array>:
 8000428:	b570      	push	{r4, r5, r6, lr}
 800042a:	4e0d      	ldr	r6, [pc, #52]	; (8000460 <__libc_init_array+0x38>)
 800042c:	4c0d      	ldr	r4, [pc, #52]	; (8000464 <__libc_init_array+0x3c>)
 800042e:	1ba4      	subs	r4, r4, r6
 8000430:	10a4      	asrs	r4, r4, #2
 8000432:	2500      	movs	r5, #0
 8000434:	42a5      	cmp	r5, r4
 8000436:	d109      	bne.n	800044c <__libc_init_array+0x24>
 8000438:	4e0b      	ldr	r6, [pc, #44]	; (8000468 <__libc_init_array+0x40>)
 800043a:	4c0c      	ldr	r4, [pc, #48]	; (800046c <__libc_init_array+0x44>)
 800043c:	f000 f818 	bl	8000470 <_init>
 8000440:	1ba4      	subs	r4, r4, r6
 8000442:	10a4      	asrs	r4, r4, #2
 8000444:	2500      	movs	r5, #0
 8000446:	42a5      	cmp	r5, r4
 8000448:	d105      	bne.n	8000456 <__libc_init_array+0x2e>
 800044a:	bd70      	pop	{r4, r5, r6, pc}
 800044c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000450:	4798      	blx	r3
 8000452:	3501      	adds	r5, #1
 8000454:	e7ee      	b.n	8000434 <__libc_init_array+0xc>
 8000456:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800045a:	4798      	blx	r3
 800045c:	3501      	adds	r5, #1
 800045e:	e7f2      	b.n	8000446 <__libc_init_array+0x1e>
 8000460:	08000488 	.word	0x08000488
 8000464:	08000488 	.word	0x08000488
 8000468:	08000488 	.word	0x08000488
 800046c:	0800048c 	.word	0x0800048c

08000470 <_init>:
 8000470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000472:	bf00      	nop
 8000474:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000476:	bc08      	pop	{r3}
 8000478:	469e      	mov	lr, r3
 800047a:	4770      	bx	lr

0800047c <_fini>:
 800047c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800047e:	bf00      	nop
 8000480:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000482:	bc08      	pop	{r3}
 8000484:	469e      	mov	lr, r3
 8000486:	4770      	bx	lr
